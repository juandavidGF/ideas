import styles from '@/styles/Home.module.css'
import { Inter } from '@next/font/google'
import Head from 'next/head'
import Image from 'next/image'
import Link from 'next/link'
import React, { useState } from 'react'
import { useUser } from '@auth0/nextjs-auth0/client';
import { record } from "vmsg";

const inter = Inter({ subsets: ['latin'] })

export default function Home() {

	const [response, setResponse] = useState();
	const { user, error, isLoading } = useUser();

	// const [state, setState] = useState({
	// 	isLoading: false,
	// 	isRecording: false,
	// 	recordings: []
	// });

	const handleSubmit = async (e) => {
		e.preventDefault();
		const text = e.target.text.value;
		const res = await fetch('/api/davinci', {
			method: 'POST',
			headers: {
				'Content-Type': 'application/json',
			},
			body: JSON.stringify({ prompt: text }),
		});
		const data = await res.json();
		setResponse(data.message);
	}

	const handleRecord = async () => {
		const blob = await record({
			wasmURL: "vmsg.wasm"
		});
		console.log("Recorded MP3", blob);
		var url = URL.createObjectURL(blob);
		var preview = document.createElement('audio');
		preview.controls = true;
		preview.src = url;
		document.body.appendChild(preview);
		await record.close();
	}

	// const record = async () => {
	// 	state.isLoading = true;

	// 	if (this.state.isRecording) {
	// 		const blob = await recorder.stopRecording();
  //     this.setState({
  //       isLoading: false,
  //       isRecording: false,
  //       recordings: this.state.recordings.concat(URL.createObjectURL(blob))
  //     });
	// 	} else {
	// 		try {
  //       await recorder.initAudio();
  //       await recorder.initWorker();
  //       recorder.startRecording();
  //       this.setState({ isLoading: false, isRecording: true });
  //     } catch (e) {
  //       console.error(e);
  //       this.setState({ isLoading: false });
  //     }
	// 	}

	// }

  return (
    <>
      <Head>
        <title>X Assistant</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className={styles.main}>
				<h1>Your personal assistant</h1>
				<p>Connect to different channels, whatsapp, slack</p>
				<p>teach new acknowledgment to your assistant based in text, audio, video</p><br/>
				{user ? user.email : null}
				<p>{response}</p>
				{user ?
					(user?.email === process.env.NEXT_PUBLIC_ALLOWED_USER ?
						(<form onSubmit={handleSubmit}>
							<div className="upload-image">
								<input type="text" id="text" name="text"/>
								<button type="submit">Send</button>
							</div>
						</form>)
						: <div>Your are not allowed, if you have some comment ... email juan@artmelon.me</div>
					)
					: (
						<div>
							<input type="text" id="text" name="text"/>
							<Link href="/api/auth/login"><button>Send</button></Link>
						</div>
					)
				}
				{user ? (<Link href="/api/auth/logout">Logout</Link>) : null}


				<button onClick={handleRecord}>Record</button>

				{/* <div className="recordings">
					<button disabled={isLoading} onClick={this.record}>
						{isRecording ? "Stop" : "Record"}
					</button>
					<ul style={{ listStyle: "none", padding: 0 }}>
						{recordings.map(url => (
							<li key={url}>
								<audio src={url} controls />
							</li>
						))}
					</ul>
				</div> */}
      </main>
    </>
  )
}
